// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1)
`

func (q *Queries) CheckUserExistence(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_token (id, user_id, expires_at) VALUES ($1, $2, $3)
`

type InsertRefreshTokenParams struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    string             `json:"user_id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, insertRefreshToken, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (id) VALUES ($1) RETURNING id, created_at, updated_at, deleted_at
`

func (q *Queries) InsertUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, created_at, updated_at, deleted_at FROM "user" WHERE id = $1
`

func (q *Queries) SelectUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
